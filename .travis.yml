language: cpp

coá¸¿piler:
  - clang
  - gcc

addons:
  apt:
    packages: &common_packages
      - doxygen
      - graphviz
      - qt5-default
      - qt5-qmake
      - lcov

matrix:
  include:

    ##########################################################################
    # Clang on Linux
    ##########################################################################
    - env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - BUILD_TYPE=Debug
      os: linux
      dist: trusty
      name: "Clang Trusty Debug"
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - BUILD_TYPE=Release
      os: linux
      dist: trusty
      name: "Clang Trusty Release"
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - BUILD_TYPE=Debug
      os: linux
      dist: xenial
      name: "Clang Xenial Debug"
      addons:
        apt:
          packages:
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - BUILD_TYPE=Release
      os: linux
      dist: xenial
      name: "Clang Xenial Release"
      addons:
        apt:
          packages:
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - BUILD_TYPE=Debug
      os: linux
      dist: bionic
      name: "Clang Bionic Debug"
      addons:
        apt:
          packages:
            - *common_packages
    - env:
        - MATRIX_EVAL="CC=clang && CXX=clang++"
        - BUILD_TYPE=Release
      os: linux
      dist: bionic
      name: "Clang Bionic Release"
      addons:
        apt:
          packages:
            - *common_packages

    ##########################################################################
    # GCC on Linux
    ##########################################################################
    - env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
        - BUILD_TYPE=Debug
      os: linux
      dist: trusty
      name: "GCC Trusty Debug"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
        - BUILD_TYPE=Release
      os: linux
      dist: trusty
      name: "GCC Trusty Release"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=gcc && CXX=g++"
        - BUILD_TYPE=Debug
      os: linux
      dist: xenial
      name: "GCC Xenial Debug"
      addons:
        apt:
          packages:
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=gcc && CXX=g++"
        - BUILD_TYPE=Release
      os: linux
      dist: xenial
      name: "GCC Xenial Release"
      addons:
        apt:
          packages:
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=gcc && CXX=g++"
        - BUILD_TYPE=Debug
      os: linux
      dist: bionic
      name: "GCC Bionic Debug"
      addons:
        apt:
          packages:
            - *common_packages

    - env:
        - MATRIX_EVAL="CC=gcc && CXX=g++"
        - BUILD_TYPE=Release
      os: linux
      dist: bionic
      name: "GCC Bionic Release"
      addons:
        apt:
          packages:
            - *common_packages

before_install:
  - wget -O cmake.sh https://cmake.org/files/v3.10/cmake-3.10.3-Linux-x86_64.sh
  - sudo sh cmake.sh --skip-license --exclude-subdir --prefix=/usr/local
  - eval "${MATRIX_EVAL}"

script:
  - mkdir build
  - cd build
  - /usr/local/bin/cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_COVERAGE=ON
  - /usr/local/bin/cmake --build . -- -j 2

  - CTEST_OUTPUT_ON_FAILURE=1 xvfb-run ctest

after_success:
    # Creating report
  - cd ${TRAVIS_BUILD_DIR}
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter out system
  - lcov --list coverage.info #debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
