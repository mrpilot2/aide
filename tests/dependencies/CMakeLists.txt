list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR})
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR})

# Download automatically, you can also just copy the conan.cmake file
if(NOT EXISTS "${CMAKE_CURRENT_BINARY_DIR}/conan.cmake")
  message(
    STATUS
      "Downloading conan.cmake from https://github.com/conan-io/cmake-conan"
  )
  file(
    DOWNLOAD
    "https://raw.githubusercontent.com/conan-io/cmake-conan/0.18.1/conan.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/conan.cmake" TLS_VERIFY ON
  )
endif()

include(${CMAKE_CURRENT_BINARY_DIR}/conan.cmake)

conan_add_remote(NAME conancenter URL https://center.conan.io)

get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)

if(${IS_MULTI_CONFIG})
  set(generator cmake_find_package_multi)
else()
  set(generator cmake_find_package)
endif()

conan_cmake_configure(REQUIRES catch2/2.13.6 GENERATORS ${generator})

if(${IS_MULTI_CONFIG})
  foreach(TYPE ${CMAKE_CONFIGURATION_TYPES})
    conan_cmake_autodetect(settings BUILD_TYPE ${TYPE})

    conan_cmake_install(
      PATH_OR_REFERENCE
      .
      BUILD
      missing
      SETTINGS
      ${settings}
      OUTPUT_QUIET
    )
  endforeach()
else()
  conan_cmake_autodetect(settings)

  conan_cmake_install(
    PATH_OR_REFERENCE
    .
    BUILD
    missing
    SETTINGS
    ${settings}
    OUTPUT_QUIET
  )
endif()

find_package(Catch2 REQUIRED)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)

find_package(
  Qt6
  COMPONENTS Core Widgets Test
  QUIET
)

if(TARGET Qt6::Test)
  find_package(Qt6LinguistTools)
else()
  find_package(
    Qt5
    COMPONENTS Widgets Test
    REQUIRED
  )

  if(NOT TARGET Qt::Test)
    add_library(Qt::Test ALIAS Qt5::Test)
  elseif(NOT TARGET Qt::Widgets)
    add_library(Qt::Widgets ALIAS Qt5::Widgets)
  endif()

  find_package(Qt5LinguistTools)
  add_executable(Qt::lrelease ALIAS Qt5::lrelease)
  add_executable(Qt::lupdate ALIAS Qt5::lupdate)
endif()
